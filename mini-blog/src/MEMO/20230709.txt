useMemo()
- Memoization : 최적화
  ㄴ 동일한 연산결과를 담아 놓았다가, 메모해놓은 값을 리턴시켜줌
  ㄴ 중복 연산결과 호출을 한번 더 호출할 필요없이 리턴
  ㄴ 즉, 불필요한 중복렌더링 방지
- userMemo(()=>{}, [의존성 변수1, 의존성변수2]);
- 렌더링이 일어나는 동안 실행

useCallback()
- useMemo와 유사 값이 아닌 함수를 반환
- 함수를 새로 정의하는게 아닌, 의존성 변수가 변경될 때만 
- 불필요한 반복작업 방지

useRef()
- Reference를 사용하기 위한 Hook
  ㄴ 특정 컴포넌트에 접근할 수 있는 객체
- useRef(초깃값);

Hook의 규칙
- Hook은 무조건 최상위 레벨에서만 호출해야한다.
  ㄴ Hook은 컴포넌트가 렌더링될 떄마다 매번 같은 순서로 호출되어야 한다.
- 리액트 함수 컴포넌트에서만 Hook을 호출해야 한다.
* eslint-plugin-react-hooks : Hook 규칙을 따를 수 있게 도와주는 플러그인

* Custom Hook
- 이름은 반드시 use로 시작해야 한다.

================================================

Event
- 사건(특정 사건을 의미)
- 사용자가 버튼을 누르는 사건 (버튼 클릭 이벤트)

DOM과 리액트의 이벤트 핸들링은 조금 다름
- 카멜표기법, 이벤트 함수 호출방법
DOM의 Event : onclick ="activate()"
리액트의 Event : onClick={activate} 

Event Handler (Event Listener)
- 어떤 사건이 발생하면, 사건을 처리하는 역할

================================================

Conditional Rendering
- 조건에 따른 렌더링 : 조건부 렌더링
  ㄴ 어떠한 조건에 따라서 렌더링이 달라지는 것
  ㄴ true이면 버튼을 보여주고, false면 버튼을 가린다.

- Truthy : true는 아니지민 true로 여겨지는 값
- Falsy : false는 아니지만 false로 여겨지는 값

렌더링해야할 컴포넌트를 변수처럼 다루고 싶을때
Element  Variables

Inline Conditions
- 조건문을 코드 안에 집어 넣는 것
Inline If => if문의 경우 && 연산자를 사용

Inline if-else => if-else문의 경우 ? 연산자 사용
조건 ? true : false

Component 렌더링 막기
- null을 리턴하면 렌더링되지 않음
- return null;

================================================

List
- 목록 / 같은 아이템을 순서대로 모아 놓은 것
- Array 배열 : 변수나 객체들을 하나의 변수로 묶어놓은 것
key
- 열쇠 : 고유한 값 (열쇠는 다 모양이 다르다)
- 각 객체나 아이템을 구분할 수 있는 고유한 값
- 아이템들을 구분하기 위한 고유한 문자열

map() 
- map() 함수를 이용하여 컴포넌트를 여러개로 렌더링 한다.

List의 key
- key의 값은 같은 List에 있는 Elements 사이에서만 고유한 값이면 된다.
- map() 함수 안에 있는 Elements들은 반드시 key값이 필요하다.

================================================

Form
- 양식 / 사용자로부터 입력을 받기 위해 사용

Controlled Components
- 값이 리액트의 통제를 받는 input form elements
- 사용자의 입력을 직접적으로 제어할 수 있음!

Textarea태그
- 여러 줄에 걸쳐 긴 텍스트를 입력받기 위한 HTML 태그

select태그
- Drop-down 목록을 보여주기 위한 HTML 태그

File Input 태그
- 디바이스의 저장 장치로부터 하나 또는 여러 개의 파일을 선택할 수 있게 해주는 HTML 태그
- Uncontrolled Component

Multiple input태그
- 각각의 set함수를 이용하여 작업

input Null Value
- value를 {null}로 선언하여 자유롭게 입력가능하도록 처리하는 것

================================================

Lifting State Up
- Shared State
  ㄴ State에 있는 데이터를 여러 개의 하위 컴포넌트에서 공통적으로 사용하는 경우
  ㄴ 부모의 State를 자식들에게 공유
  ㄴ 하위 컴포넌트가 공통된 부모 컴포넌트의 state를 공유하여 사용하는 것

- 하위 컴포넌트에서 State 공유하기

================================================

Composition / Inheritance

- Composition (구성/합성)
- 여러 개의 컴포넌트를 합쳐서 새로운 컴포넌트를 만드는 것
- 리액트에서 많이 사용되는 방법

1. Containment
- 담다, 포함하다
- 하위 컴포넌트를 포함하는 형태의 합성 방법
- chilren이라는 prop을 사용해서 조합

2. Specialization
- 전문화, 특수화
- 특별한 케이스 
- 리액트에서는 합성을 사용하여 Specialization을 구현한다.

3. Containment + Specialization

Inheritance
- 상속
- 다른 컴포넌트로부터 상속을 받아서 새로운 컴포넌트를 만드는 것
- 추천사례가 존재하지 않음

* 복잡한 컴포넌트를 쪼개서 여러 개의 컴포넌트로 만들고, 만든 컴포넌트들을 조합해서 새로운 컴포넌트를 만들자!

================================================

★ 차후 책에서 한번 더 이해 필요
Context 
- 기존 컴포넌트는 props를 통한 데이터 전달
- Context를 사용하게되면 데이터 전달시, 컴포넌트들을 들릴필요없이 데이터 전달 가능
- 사용시점은 로그인 여부/ 로그인 정보/ UI테마 / 언어 등 자주 사용되는 데이터들에 사용
ex) const ThemeContext = React.createContext('light');
    <ThemeContext.provider ...>
    </ThemeContext.provider>
    ㄴ provider를 사용하여 하위 컴포넌트들에게 현재 데이터를 전달해 준다.
- 재사용성이 그만큼 줄어드니 필요한 경우에만 사용

Context API

* Context생성
- React.createContext(기본값) 
- 만약 상위 레벨에 매칭되는 Provider가 없다면 기본값이 사용됨!
- 기본값으로 undefined를 넣으면 기본값이 사용되지 않음.
- Context.Provider

- Provider 주의
  ㄴ 컴포넌트가 재렌더링될 때마다 모든 하위 consumer컴퓨넌트가 재렌더링 됨.

- Context.Consumer
- function as a child
- Context.displayName
- useContext()

================================================

Styling
- CSS 와 selector(선택자)

Selector
- Element selector
ex.) h1 {스타일}
- ID selector
ex.) #section {스타일}
- class selector
ex.) .medium {스타일}
- Universal selector
ex.) * {스타일}
- Grouping selector
ex.) h1,h2,p {동일한 스타일}
- Element의 상태와 관련된 selector
  ㄴ :hover , :active, :focus
ex.) button:hover {스타일}

* 레이아웃과 관련된 CSS 속성
Layout
- 화면 배치
- display
  ㄴ none | block | inline | flex
- visibility
  ㄴ visible | hidden
- position
  ㄴ static | fixed | relative | absolute

Flexbox
- flex container [flex item,flex item,flex item....]
  ㄴ관련속성 : display, flex-direction, align-items, justify-content
- flex-direction
  ㄴ row(가로순서대로) ,column(세로순서대로), row-reverse(가로 역으로), column-reverse(세로 역으로)
  main axis : flex-direction이 흐르는 방향 / cross axis : flex-direction을 가로지르는 방향
- align-items (cross axis 기준)
  ㄴ stretch, flex-start, center, flex-end, baseline
- justify-content (main axis 기준)
  ㄴ flex-start, center, flex-end, space-between, space-around

Font
- font-family 글꼴
- font-size
  ㄴ px,em,rem,vw(viewport width)
- font-weight 글두께
- font-style
  ㄴ normal, italic, oblique

기타
- background-color
- border

================================================

styled-components
- 설치
npm install -- save styled-components

- literal (소스코드내에 고정된 값)
  ex.) 10, 'Hello', [], {}
- template literal

- styled.div(html태그) `....`; 형태로 작성

================================================
미니블로그는 한번 더 분석해봐야할듯


미니프로젝트 참고 gitHub
https://github.com/soaple/mini-blog


미니블로그에 필요한 기능
- 글 목록보기 기능 (리스트 형태)
  ㄴ PostList, PostListItem
- 글 보기 기능
  ㄴ Post
- 댓글 보기 기능
  ㄴ CommentList, CommentListItem
- 글 작성 기능
  ㄴ PostWrite
- 댓글 작성 기능
  ㄴ CommentWrite

설치 패키지
react-router-dom v6 > 페이지 전환 패키지
styled-components v5 

패키지 설치하기
*. --save 옵션은 package.json의 dependency에 모듈을 추가한다는 의미
npm install --save react-router-dom styled-components

* react-router-dom
- useNavigate() 페이지 이동

-router는 app.js에 정의
 ㄴ app.js는 제일 먼저 렌더링 되는 곳
index.js에 <APP /> 가 app.js를 가리키고 있음

- 빌드 방법
npm run build
- serve 설치하기
npm serve -s build